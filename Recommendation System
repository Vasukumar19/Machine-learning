# Collaborative Filtering Recommendation System
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns

# Create sample user-item rating matrix
# Rows = Users, Columns = Items (movies)
users = ['Alice', 'Bob', 'Charlie', 'David', 'Eve']
movies = ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E']

# Rating matrix (0 means not rated)
ratings_data = {
    'Alice': [5, 3, 0, 1, 4],
    'Bob': [4, 0, 0, 1, 3],
    'Charlie': [1, 1, 0, 5, 4],
    'David': [0, 0, 4, 4, 0],
    'Eve': [0, 1, 5, 4, 0]
}

ratings_df = pd.DataFrame(ratings_data, index=movies).T
print("User-Item Rating Matrix:")
print(ratings_df)
print()

# Visualize the rating matrix
plt.figure(figsize=(8, 6))
sns.heatmap(ratings_df, annot=True, cmap='YlOrRd', cbar_kws={'label': 'Rating'})
plt.title('User-Item Rating Matrix')
plt.xlabel('Movies')
plt.ylabel('Users')
plt.tight_layout()
plt.show()

# User-based Collaborative Filtering
# Calculate user similarity using cosine similarity
user_similarity = cosine_similarity(ratings_df)
user_similarity_df = pd.DataFrame(user_similarity,
                                  index=ratings_df.index,
                                  columns=ratings_df.index)

print("User Similarity Matrix:")
print(user_similarity_df)
print()

# Visualize user similarity
plt.figure(figsize=(8, 6))
sns.heatmap(user_similarity_df, annot=True, cmap='coolwarm', vmin=0, vmax=1)
plt.title('User Similarity Matrix (Cosine Similarity)')
plt.tight_layout()
plt.show()

def predict_rating(user, item, ratings_df, user_similarity_df, k=3):
    """
    Predict rating for a user-item pair using k-nearest neighbors
    """
    # Get similar users (excluding the user itself)
    similar_users = user_similarity_df[user].sort_values(ascending=False)[1:k+1]

    # Calculate weighted average of ratings from similar users
    numerator = 0
    denominator = 0

    for similar_user, similarity in similar_users.items():
        rating = ratings_df.loc[similar_user, item]
        if rating > 0:  # Only consider users who have rated this item
            numerator += similarity * rating
            denominator += similarity

    if denominator == 0:
        return 0

    return numerator / denominator

# Make recommendations for a specific user
target_user = 'Alice'
print(f"\nMaking recommendations for {target_user}:")
print(f"Current ratings by {target_user}:")
print(ratings_df.loc[target_user])
print()

# Predict ratings for unrated items
predictions = {}
for movie in movies:
    if ratings_df.loc[target_user, movie] == 0:  # Unrated items
        predicted_rating = predict_rating(target_user, movie, ratings_df, user_similarity_df)
        predictions[movie] = predicted_rating

# Sort predictions
recommendations = sorted(predictions.items(), key=lambda x: x[1], reverse=True)

print(f"\nRecommended movies for {target_user}:")
for movie, rating in recommendations:
    print(f"{movie}: Predicted Rating = {rating:.2f}")

# Item-based Collaborative Filtering
item_similarity = cosine_similarity(ratings_df.T)
item_similarity_df = pd.DataFrame(item_similarity,
                                  index=movies,
                                  columns=movies)

print("\n" + "="*50)
print("Item Similarity Matrix:")
print(item_similarity_df)
print()

# Visualize item similarity
plt.figure(figsize=(8, 6))
sns.heatmap(item_similarity_df, annot=True, cmap='viridis', vmin=0, vmax=1)
plt.title('Item Similarity Matrix (Cosine Similarity)')
plt.tight_layout()
plt.show()

# Example: Find similar items to a given movie
target_movie = 'Movie A'
print(f"\nMovies similar to {target_movie}:")
similar_movies = item_similarity_df[target_movie].sort_values(ascending=False)[1:]
for movie, similarity in similar_movies.items():
    print(f"{movie}: Similarity = {similarity:.2f}")
